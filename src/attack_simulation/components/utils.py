import pandas as pd 
import random
import string
import hashlib
from faker import Faker
import polars as pl
from datetime import datetime, timedelta
import json

#TODO: extend process names to applicable/more common processes
PROCESS_NAMES = ['explorer.exe', 'cmd.exe', 'powershell.exe', 'python.exe', 'notepad.exe', 'svchost.exe']

EMPLOYEE_ROLES = [
    'Chief Information Officer (CIO)', 'IT Director', 'IT Manager', 'System Administrator',
    'Network Engineer', 'Database Administrator (DBA)', 'DevOps Engineer', 'Software Developer',
    'Frontend Developer', 'Backend Developer', 'Full Stack Developer', 'Mobile Application Developer',
    'Quality Assurance (QA) Engineer', 'Security Analyst', 'Technical Support Specialist',
    'Help Desk Technician', 'IT Support Manager', 'Cloud Architect', 'Data Scientist',
    'Machine Learning Engineer', 'Chief Human Resources Officer (CHRO)', 'HR Director', 'HR Manager',
    'Recruitment Specialist', 'Talent Acquisition Manager', 'HR Generalist', 'HR Coordinator',
    'Compensation and Benefits Analyst', 'Training and Development Manager', 'Employee Relations Specialist',
    'Chief Financial Officer (CFO)', 'Finance Director', 'Accounting Manager', 'Financial Analyst',
    'Accountant', 'Accounts Payable Specialist', 'Accounts Receivable Specialist', 'Controller',
    'Payroll Manager', 'Tax Specialist', 'Chief Marketing Officer (CMO)', 'Marketing Director',
    'Marketing Manager', 'Digital Marketing Specialist', 'Content Marketing Manager', 'Social Media Manager',
    'SEO Specialist', 'Brand Manager', 'Product Marketing Manager', 'Marketing Analyst',
    'Chief Sales Officer (CSO)', 'Sales Director', 'Sales Manager', 'Account Executive',
    'Sales Representative', 'Business Development Manager', 'Inside Sales Representative',
    'Sales Operations Manager', 'Customer Success Manager', 'Chief Operating Officer (COO)',
    'Operations Director', 'Operations Manager', 'Supply Chain Manager', 'Logistics Coordinator',
    'Procurement Specialist', 'Project Manager', 'Program Manager', 'Facilities Manager',
    'Customer Service Manager', 'Customer Support Specialist', 'Call Center Supervisor',
    'Customer Success Representative', 'Technical Support Representative', 'R&D Director',
    'Research Scientist', 'Product Developer', 'Innovation Manager', 'Lab Technician',
    'Chief Legal Officer (CLO)', 'Legal Counsel', 'Paralegal', 'Compliance Officer', 'Contracts Manager',
    'Chief Executive Officer (CEO)', 'Vice President (VP) of Operations', 'Vice President (VP) of Sales',
    'Vice President (VP) of Engineering', 'Vice President (VP) of Marketing'
]

def generate_identity_info(num_employees, fake, end_date):
    data = {
        "Timestamp": [fake.date_time_between(start_date=end_date - timedelta(days=365), end_date=end_date) for _ in range(num_employees)],
        "ReportId": [fake.uuid4() for _ in range(num_employees)],
        "AccountObjectId": [fake.uuid4() for _ in range(num_employees)],
        "AccountUpn": [fake.user_name() + "@example.com" for _ in range(num_employees)],
        "OnPremSid": [fake.uuid4() for _ in range(num_employees)],
        "AccountDisplayName": [fake.name() for _ in range(num_employees)],
        "AccountName": [fake.user_name() for _ in range(num_employees)],
        "AccountDomain": [fake.domain_name() for _ in range(num_employees)],
        "Type": ["User"] * num_employees,
        "DistinguishedName": [""] * num_employees,
        "CloudSid": [fake.uuid4() for _ in range(num_employees)],
        "GivenName": [fake.first_name() for _ in range(num_employees)],
        "Surname": [fake.last_name() for _ in range(num_employees)],
        "Department": [random.choice(EMPLOYEE_ROLES) for _ in range(num_employees)],
    }
    return pl.DataFrame(data).sort("Timestamp")

def generate_aad_sign_in_events(identity_row, timestamp, fake, ip_address=None):
    azure_resources = ["Azure Blob Storage", "Azure SQL Database", "Azure Virtual Machine", 
                "Azure Kubernetes Service", "Azure App Service", "Azure Functions", 
                "Azure Logic Apps", "Azure Data Factory", "Azure Synapse Analytics", 
                "Azure Cosmos DB"]
    
    event = {
        "Timestamp": fake.date_time_between(start_date=timestamp - timedelta(days=1), end_date=timestamp),
        "Application": "",
        "ApplicationId": fake.uuid4(),
        "LogonType": random.choice(["Interactive", "RemoteInteractive", "Network", "Batch", "Service"]),
        "ErrorCode": random.choices([0, 50053, 50126, 50140, 50144], weights=[95, 1, 1, 1, 1])[0],
        "CorrelationId": fake.uuid4(),
        "SessionId": fake.uuid4(),
        "AccountDisplayName": identity_row["AccountDisplayName"],
        "AccountObjectId": identity_row["AccountObjectId"],
        "AccountUpn": identity_row["AccountUpn"],
        "IsExternalUser": 0,
        "IsGuestUser": False,
        "AlternateSignInName": "",
        "LastPasswordChangeTimestamp": fake.date_time_between(start_date=timestamp - timedelta(days=365), end_date=timestamp),
        "ResourceDisplayName": random.choice(azure_resources),
        "ResourceId": fake.uuid4(),
        "ResourceTenantId": fake.uuid4(),
        "DeviceName": fake.hostname(),
        "AadDeviceId": fake.uuid4(),
        "OSPlatform": random.choice(["Windows 10", "Windows 11", "macOS", "Linux"]),
        "DeviceTrustType": random.choice(["Workplace", "AzureAd", "ServerAd"]),
        "IsManaged": 1,
        "IsCompliant": 1,
        "AuthenticationProcessingDetails": "",
        "AuthenticationRequirement": random.choice(["multiFactorAuthentication", "singleFactorAuthentication"]),
        "TokenIssuerType": random.choice([0]),
        "RiskLevelAggregated": random.choice([0, 1, 10, 50]),
        "RiskDetails": random.randint(0, 4),
        "RiskState": random.randint(0, 4),  # cannot have 5 since this is benign data
        "UserAgent": fake.user_agent(),
        "ClientAppUsed": random.choice(["Browser", "Mobile App", "Desktop App"]),
        "Browser": fake.chrome(),
        "ConditionalAccessPolicies": "",  # TODO: add conditional access policies
        "ConditionalAccessStatus": random.choice([0, 1, 2]),
        "IPAddress": ip_address if ip_address else fake.ipv4(),
        "Country": fake.country_code(),
        "State": fake.state(),
        "City": fake.city(),
        "Latitude": str(fake.latitude()),
        "Longitude": str(fake.longitude()),
        "NetworkLocationDetails": "",
        "RequestId": fake.uuid4(),
        "ReportId": fake.uuid4(),
        "EndpointCall": "",
    }

    return event

def generate_device_info(identity_row, timestamp, fake):
    is_azure_ad_joined = random.choices([True, False], weights=[70, 30])[0]
    device_info = {
        "Timestamp": timestamp,
        "DeviceId": fake.uuid4(),
        "DeviceName": f"{''.join(random.choices(string.ascii_uppercase + string.digits, k=4))}-{random.choice(['DESKTOP', 'LAPTOP', 'SERVER'])}",
        "ClientVersion": f"{random.randint(1, 10)}.{random.randint(0, 9)}.{random.randint(0, 9)}",
        "PublicIP": fake.ipv4(),
        "OSArchitecture": random.choice(["x86", "x64", "ARM"]),
        "OSPlatform": random.choice(["Windows 10", "Windows 11", "macOS", "Linux"]),
        "OSBuild": random.randint(10000, 99999),
        "IsAzureADJoined": is_azure_ad_joined,
        "JoinType": "AzureAD" if is_azure_ad_joined else random.choice(["Domain", "Workgroup"]),
        "AadDeviceId": fake.uuid4(),
        "LoggedOnUsers": f'[{{"AccountDisplayName": "{identity_row["AccountDisplayName"]}", "AccountUpn": "{identity_row["AccountUpn"]}"}}]',
        "RegistryDeviceTag": "",
        "OSVersion": f"{random.randint(1, 10)}.{random.randint(0, 9)}.{random.randint(0, 9)}",
        "MachineGroup": "",
        "ReportId": random.randint(100000, 999999),
        "OnboardingStatus": random.choice(["Onboarded"]),
        "AdditionalFields": "{}",
        "DeviceCategory": random.choice(["Endpoint", "Server"]),
        "DeviceType": random.choice(["Laptop", "Desktop", "Virtual Machine"]),
        "DeviceSubtype": random.choice(["Standard", "High Performance"]),
        "Model": "",
        "Vendor": fake.company(),
        "OSDistribution": random.choice(["Windows", "Ubuntu", "macOS"]),
        "OSVersionInfo": f"{random.randint(1, 10)}.{random.randint(0, 9)}.{random.randint(0, 9)}",
        "MergedDeviceIds": "[]",
        "MergedToDeviceId": "",
        "IsInternetFacing": random.choice([True]),
        "SensorHealthState": random.choices(["Healthy", "Unhealthy"], weights=[90, 10])[0],
        "IsExcluded": random.choice([True, False]),
        "ExclusionReason": fake.sentence() if random.choice([True, False]) else "",
        "ExposureLevel": random.choices(["High", "Medium", "Low"], weights=[10, 20, 70])[0],
        "AssetValue": random.choices(["Critical", "Normal"], weights=[95, 5])[0],
        "DeviceManualTags": "[]",
        "DeviceDynamicTags": "[]",
        "ConnectivityType": random.choice(["Connected", "Disconnected"]),
        "HostDeviceId": "",
        "AzureResourceId": "",
        "AwsResourceName": "",
        "GcpFullResourceName": "",
    }
    return device_info

def generate_device_events(identity_row, device_row, timestamp, fake, action_type=None, remote_url=None, remote_ip=None, process_name=None, process_id=None):
    event = {
        "Timestamp": timestamp,
        "DeviceId": device_row["DeviceId"],
        "DeviceName": device_row["DeviceName"],
        "ActionType": action_type if action_type else random.choice(["FileCreated", "FileDeleted", "ProcessStarted", "RegistryModified"]),
        "FileName": fake.file_name(),
        "FolderPath": fake.file_path(depth=3),
        "SHA1": hashlib.sha1(fake.file_name().encode()).hexdigest(),
        "SHA256": hashlib.sha256(fake.file_name().encode()).hexdigest(),
        "MD5": hashlib.md5(fake.file_name().encode()).hexdigest(),
        "FileSize": random.randint(100, 10_000_000),
        "AccountDomain": identity_row["AccountDomain"],
        "AccountName": identity_row["AccountName"],
        "AccountSid": identity_row["OnPremSid"],
        "RemoteUrl": remote_url if remote_url else fake.url(),
        "RemoteDeviceName": fake.hostname(),
        "ProcessId": process_id if process_id else random.randint(1000, 9999),
        "ProcessName": process_name if process_name else random.choice(PROCESS_NAMES),
        "ProcessCommandLine": f"{process_name if process_name else random.choice(PROCESS_NAMES)} {fake.file_path(depth=2)}",
        "ProcessCreationTime": fake.date_time_between(start_date=timestamp - timedelta(days=1), end_date=timestamp),
        "ProcessTokenElevation": random.choice(["TokenElevationTypeLimited", "TokenElevationTypeDefault", "TokenElevationTypeFull"]),
        "LogonId": random.randint(1000, 9999),
        "RegistryKey": f"HKEY_LOCAL_MACHINE\\{fake.word()}\\{fake.word()}",
        "RegistryValueName": fake.word(),
        "RegistryValueData": fake.word(),
        "RemoteIP": remote_ip if remote_ip else fake.ipv4(),
        "RemotePort": random.randint(1024, 65535),
        "LocalIP": fake.ipv4(),
        "LocalPort": random.randint(1024, 65535),
        "FileOriginUrl": fake.url(),
        "FileOriginIP": fake.ipv4(),
        "InitiatingProcessSHA1": hashlib.sha1(fake.file_name().encode()).hexdigest(),
        "InitiatingProcessSHA256": hashlib.sha256(fake.file_name().encode()).hexdigest(),
        "InitiatingProcessMD5": hashlib.md5(fake.file_name().encode()).hexdigest(),
        "InitiatingProcessFileName": fake.file_name(),
        "InitiatingProcessFileSize": random.randint(100, 10_000_000),
        "InitiatingProcessFolderPath": fake.file_path(depth=3),
        "InitiatingProcessId": random.randint(1000, 9999),
        "InitiatingProcessCommandLine": f"{random.choice(PROCESS_NAMES)} {fake.file_path(depth=2)}",
        "InitiatingProcessCreationTime": fake.date_time_between(start_date=timestamp - timedelta(days=1), end_date=timestamp),
        "InitiatingProcessAccountDomain": identity_row["AccountDomain"],
        "InitiatingProcessAccountName": identity_row["AccountName"],
        "InitiatingProcessAccountSid": identity_row["OnPremSid"],
        "InitiatingProcessAccountUpn": identity_row["AccountUpn"],
        "InitiatingProcessAccountObjectId": identity_row["AccountObjectId"],
        "InitiatingProcessVersionInfoCompanyName": fake.company(),
        "InitiatingProcessVersionInfoProductName": fake.word(),
        "InitiatingProcessVersionInfoProductVersion": f"{random.randint(1, 10)}.{random.randint(0, 9)}.{random.randint(0, 9)}",
        "InitiatingProcessVersionInfoInternalFileName": fake.file_name(),
        "InitiatingProcessVersionInfoOriginalFileName": fake.file_name(),
        "InitiatingProcessVersionInfoFileDescription": fake.sentence(),
        "InitiatingProcessParentId": random.randint(1000, 9999),
        "InitiatingProcessParentFileName": fake.file_name(),
        "InitiatingProcessParentCreationTime": fake.date_time_between(start_date=timestamp - timedelta(days=2), end_date=timestamp - timedelta(days=1)),
        "InitiatingProcessLogonId": random.randint(1000, 9999),
        "ReportId": random.randint(100000, 999999),
        "AppGuardContainerId": fake.uuid4(),
        "AdditionalFields": "{}",
        "InitiatingProcessSessionId": random.randint(1, 10),
        "IsInitiatingProcessRemoteSession": random.choice([True, False]),
        "InitiatingProcessRemoteSessionDeviceName": fake.hostname(),
        "InitiatingProcessRemoteSessionIP": fake.ipv4(),
        "CreatedProcessSessionId": random.randint(1, 10),
        "IsProcessRemoteSession": random.choice([True, False]),
        "ProcessRemoteSessionDeviceName": fake.hostname(),
        "ProcessRemoteSessionIP": fake.ipv4(),
    }
    return event

def generate_email_events(identity_row_sender, identity_row_recipient, timestamp, in_network, fake, know_sender=True, subject=None):
    delivery_action = random.choices(["Delivered", "Junked", "Blocked"], weights=[90, 3, 2])[0]
    if delivery_action == "Delivered":
        delivery_location = "Inbox"
    elif delivery_action == "Junked":
        delivery_location = "Junk"
    elif delivery_action == "Blocked":
        delivery_location = random.choice(["Quarantine", "Deleted items"])

    if in_network == False and know_sender == False:
        identity_row_sender = {
            "AccountUpn": fake.email(),
            "AccountDisplayName": fake.name(),
            "AccountObjectId": fake.uuid4(),
            "AccountDomain": fake.domain_name(),
        }

    email_event = {
        "Timestamp": fake.date_time_between(start_date=timestamp - timedelta(days=1), end_date=timestamp),
        "NetworkMessageId": fake.uuid4(),
        "InternetMessageId": fake.uuid4(),
        "SenderMailFromAddress": identity_row_sender["AccountUpn"],
        "SenderFromAddress": identity_row_sender["AccountUpn"],
        "SenderDisplayName": identity_row_sender["AccountDisplayName"],
        "SenderObjectId": identity_row_sender["AccountObjectId"],
        "SenderMailFromDomain": identity_row_sender["AccountDomain"],
        "SenderFromDomain": identity_row_sender["AccountDomain"],
        "SenderIPv4": identity_row_sender['SenderIPv4'] if "SenderIPv4" in identity_row_sender else fake.ipv4(),
        "SenderIPv6": identity_row_sender['SenderIPv6'] if "SenderIPv6" in identity_row_sender else fake.ipv6(),
        "RecipientEmailAddress": identity_row_recipient["AccountUpn"],
        "RecipientObjectId": identity_row_recipient["AccountObjectId"],
        "Subject": subject if subject else fake.sentence(),
        "EmailClusterId": random.randint(100000, 999999),
        "EmailDirection": random.choice(["Inbound", "Outbound", "Internal"]),
        "DeliveryAction": delivery_action,
        "DeliveryLocation": delivery_location,
        "ThreatTypes": "",
        "ThreatNames": "",
        "DetectionMethods": "",
        "ConfidenceLevel": random.choice(["High", "Low", "Medium"]),
        "BulkComplaintLevel": random.randint(0, 9),
        "EmailAction": "",
        "EmailActionPolicy": "",
        "EmailActionPolicyGuid": fake.uuid4(),
        "AuthenticationDetails": "",
        "AttachmentCount": random.randint(0, 5),
        "UrlCount": random.randint(0, 10),
        "EmailLanguage": "English",
        "Connectors": "",
        "OrgLevelAction": "",
        "OrgLevelPolicy": "",
        "UserLevelAction": "",
        "UserLevelPolicy": "",
        "ReportId": fake.uuid4(),
        "AdditionalFields": "{}",
        "LatestDeliveryLocation": delivery_location,
        "LatestDeliveryAction": delivery_action,
    }
    return email_event

def generate_device_file_events(identity_row, device_row, timestamp, fake, file_name=None, file_path=None):
    device_file_event = {
        "Timestamp": timestamp,
        "DeviceId": device_row["DeviceId"],
        "DeviceName": device_row["DeviceName"],
        "ActionType": random.choice(["FileCreated", "FileDeleted", "FileModified", "FileRenamed"]),
        "FileName": file_name if file_name else fake.file_name(),
        "FolderPath": file_path if file_path else fake.file_path(depth=3),
        "SHA1": hashlib.sha1(fake.file_name().encode()).hexdigest(),
        "SHA256": hashlib.sha256(fake.file_name().encode()).hexdigest(),
        "MD5": hashlib.md5(fake.file_name().encode()).hexdigest(),
        "FileOriginUrl": fake.url(),
        "FileOriginReferrerUrl": fake.url(),
        "FileOriginIP": fake.ipv4(),
        "PreviousFolderPath": fake.file_path(depth=3),
        "PreviousFileName": fake.file_name(),
        "FileSize": random.randint(100, 10_000_000),
        "InitiatingProcessAccountDomain": identity_row["AccountDomain"],
        "InitiatingProcessAccountName": identity_row["AccountName"],
        "InitiatingProcessAccountSid": identity_row["OnPremSid"],
        "InitiatingProcessAccountUpn": identity_row["AccountUpn"],
        "InitiatingProcessAccountObjectId": identity_row["AccountObjectId"],
        "InitiatingProcessMD5": hashlib.md5(fake.file_name().encode()).hexdigest(),
        "InitiatingProcessSHA1": hashlib.sha1(fake.file_name().encode()).hexdigest(),
        "InitiatingProcessSHA256": hashlib.sha256(fake.file_name().encode()).hexdigest(),
        "InitiatingProcessFolderPath": fake.file_path(depth=3),
        "InitiatingProcessFileName": fake.file_name(),
        "InitiatingProcessFileSize": random.randint(100, 10_000_000),
        "InitiatingProcessVersionInfoCompanyName": fake.company(),
        "InitiatingProcessVersionInfoProductName": fake.word(),
        "InitiatingProcessVersionInfoProductVersion": f"{random.randint(1, 10)}.{random.randint(0, 9)}.{random.randint(0, 9)}",
        "InitiatingProcessVersionInfoInternalFileName": fake.file_name(),
        "InitiatingProcessVersionInfoOriginalFileName": fake.file_name(),
        "InitiatingProcessVersionInfoFileDescription": fake.sentence(),
        "InitiatingProcessId": random.randint(1000, 9999),
        "InitiatingProcessCommandLine": f"{random.choice(PROCESS_NAMES)} {fake.file_path(depth=2)}",
        "InitiatingProcessCreationTime": fake.date_time_between(start_date=timestamp - timedelta(days=1), end_date=timestamp),
        "InitiatingProcessIntegrityLevel": random.choice(["Low", "Medium", "High"]),
        "InitiatingProcessTokenElevation": random.choice(["TokenElevationTypeLimited", "TokenElevationTypeDefault", "TokenElevationTypeFull"]),
        "InitiatingProcessParentId": random.randint(1000, 9999),
        "InitiatingProcessParentFileName": fake.file_name(),
        "InitiatingProcessParentCreationTime": fake.date_time_between(start_date=timestamp - timedelta(days=2), end_date=timestamp - timedelta(days=1)),
        "RequestProtocol": random.choice(["Unknown", "Local", "SMB", "NFS"]),
        "RequestSourceIP": fake.ipv4(),
        "RequestSourcePort": random.randint(1024, 65535),
        "RequestAccountName": identity_row["AccountName"],
        "RequestAccountDomain": identity_row["AccountDomain"],
        "RequestAccountSid": identity_row["OnPremSid"],
        "ShareName": f"\\\\{fake.hostname()}\\{fake.word()}",
        "SensitivityLabel": random.choice(["Confidential", "Public", "Internal"]),
        "SensitivitySubLabel": random.choice(["None", "Restricted"]),
        "IsAzureInfoProtectionApplied": random.choice([True, False]),
        "ReportId": random.randint(100000, 999999),
        "AppGuardContainerId": fake.uuid4(),
        "AdditionalFields": "{}",
        "InitiatingProcessSessionId": random.randint(1, 10),
        "IsInitiatingProcessRemoteSession": random.choice([True, False]),
        "InitiatingProcessRemoteSessionDeviceName": fake.hostname(),
        "InitiatingProcessRemoteSessionIP": fake.ipv4(),
    }
    return device_file_event

def generate_device_process_events(identity_row, device_row, timestamp, fake, file_name=None, process_command_line=None):
    process_event = {
        "Timestamp": timestamp,
        "DeviceId": device_row["DeviceId"],
        "DeviceName": device_row["DeviceName"],
        "ActionType": "ProcessCreated" if file_name != None else random.choice(["ProcessCreated", "ProcessTerminated"]),
        "FileName": file_name if file_name else fake.file_name(),
        "FolderPath": fake.file_path(depth=3),
        "SHA1": hashlib.sha1(fake.file_name().encode()).hexdigest(),
        "SHA256": hashlib.sha256(fake.file_name().encode()).hexdigest(),
        "MD5": hashlib.md5(fake.file_name().encode()).hexdigest(),
        "FileSize": random.randint(100, 10_000_000),
        "ProcessVersionInfoCompanyName": fake.company(),
        "ProcessVersionInfoProductName": fake.word(),
        "ProcessVersionInfoProductVersion": f"{random.randint(1, 10)}.{random.randint(0, 9)}.{random.randint(0, 9)}",
        "ProcessVersionInfoInternalFileName": fake.file_name(),
        "ProcessVersionInfoOriginalFileName": fake.file_name(),
        "ProcessVersionInfoFileDescription": fake.sentence(),
        "ProcessId": random.randint(1000, 9999),
        "ProcessCommandLine": f"{random.choice(PROCESS_NAMES)} {fake.file_path(depth=2)}" if process_command_line is None else process_command_line,
        "ProcessIntegrityLevel": random.choice(["Low", "Medium", "High"]),
        "ProcessTokenElevation": random.choice(["TokenElevationTypeLimited", "TokenElevationTypeDefault", "TokenElevationTypeFull"]),
        "ProcessCreationTime": fake.date_time_between(start_date=timestamp - timedelta(days=1), end_date=timestamp),
        "AccountDomain": identity_row["AccountDomain"],
        "AccountName": identity_row["AccountName"],
        "AccountSid": identity_row["OnPremSid"],
        "AccountUpn": identity_row["AccountUpn"],
        "AccountObjectId": identity_row["AccountObjectId"],
        "LogonId": random.randint(1000, 9999),
        "InitiatingProcessAccountDomain": identity_row["AccountDomain"],
        "InitiatingProcessAccountName": identity_row["AccountName"],
        "InitiatingProcessAccountSid": identity_row["OnPremSid"],
        "InitiatingProcessAccountUpn": identity_row["AccountUpn"],
        "InitiatingProcessAccountObjectId": identity_row["AccountObjectId"],
        "InitiatingProcessLogonId": random.randint(1000, 9999),
        "InitiatingProcessIntegrityLevel": random.choice(["Low", "Medium", "High"]),
        "InitiatingProcessTokenElevation": random.choice(["TokenElevationTypeLimited", "TokenElevationTypeDefault", "TokenElevationTypeFull"]),
        "InitiatingProcessSHA1": hashlib.sha1(fake.file_name().encode()).hexdigest(),
        "InitiatingProcessSHA256": hashlib.sha256(fake.file_name().encode()).hexdigest(),
        "InitiatingProcessMD5": hashlib.md5(fake.file_name().encode()).hexdigest(),
        "InitiatingProcessFileName": fake.file_name(),
        "InitiatingProcessFileSize": random.randint(100, 10_000_000),
        "InitiatingProcessVersionInfoCompanyName": fake.company(),
        "InitiatingProcessVersionInfoProductName": fake.word(),
        "InitiatingProcessVersionInfoProductVersion": f"{random.randint(1, 10)}.{random.randint(0, 9)}.{random.randint(0, 9)}",
        "InitiatingProcessVersionInfoInternalFileName": fake.file_name(),
        "InitiatingProcessVersionInfoOriginalFileName": fake.file_name(),
        "InitiatingProcessVersionInfoFileDescription": fake.sentence(),
        "InitiatingProcessId": random.randint(1000, 9999),
        "InitiatingProcessCommandLine": f"{random.choice(PROCESS_NAMES)} {fake.file_path(depth=2)}" if process_command_line is None else process_command_line,
        "InitiatingProcessCreationTime": fake.date_time_between(start_date=timestamp - timedelta(days=1), end_date=timestamp),
        "InitiatingProcessFolderPath": fake.file_path(depth=3),
        "InitiatingProcessParentId": random.randint(1000, 9999),
        "InitiatingProcessParentFileName": fake.file_name(),
        "InitiatingProcessParentCreationTime": fake.date_time_between(start_date=timestamp - timedelta(days=2), end_date=timestamp - timedelta(days=1)),
        "InitiatingProcessSignerType": random.choice(["None", "Self-signed", "CA-signed"]),
        "InitiatingProcessSignatureStatus": random.choice(["Valid", "Invalid", "Unknown"]),
        "ReportId": random.randint(100000, 999999),
        "AppGuardContainerId": fake.uuid4(),
        "AdditionalFields": "{}",
        "InitiatingProcessSessionId": random.randint(1, 10),
        "IsInitiatingProcessRemoteSession": random.choice([True, False]),
        "InitiatingProcessRemoteSessionDeviceName": fake.hostname(),
        "InitiatingProcessRemoteSessionIP": fake.ipv4(),
        "CreatedProcessSessionId": random.randint(1, 10),
        "IsProcessRemoteSession": random.choice([True, False]),
        "ProcessRemoteSessionDeviceName": fake.hostname(),
        "ProcessRemoteSessionIP": fake.ipv4(),
    }
    return process_event

def generate_inbound_network_events(identity_row, device_row, timestamp, fake, remote_ip, remote_url, remote_port):
    process_name = random.choice(PROCESS_NAMES)
    event = {  
        "Timestamp": timestamp,  
        "DeviceId": device_row["DeviceId"],  
        "DeviceName": device_row["DeviceName"],  
        "ActionType": "InboundConnection",  
        "RemoteIP": remote_ip,  
        "RemotePort": remote_port,  
        "RemoteUrl": remote_url,  
        "LocalIP": device_row["PublicIP"],  
        "LocalPort": random.choice([80, 443, 22, 3389, 8080]),  
        "Protocol": random.choice(["TCP", "UDP"]),  
        "LocalIPType": "Public",  
        "RemoteIPType": "Public",  
        
        #TODO: From here down is pretty much a guess, need to figure out what these actually mean and update
        "InitiatingProcessSHA1": hashlib.sha1(process_name.encode()).hexdigest(),  
        "InitiatingProcessSHA256": hashlib.sha256(process_name.encode()).hexdigest(),  
        "InitiatingProcessMD5": hashlib.md5(process_name.encode()).hexdigest(),  
        "InitiatingProcessFileName": process_name,  
        "InitiatingProcessFileSize": random.randint(100, 10_000_000),  
        "InitiatingProcessVersionInfoCompanyName": fake.company(),  
        "InitiatingProcessVersionInfoProductName": fake.word(),  
        "InitiatingProcessVersionInfoProductVersion": f"{random.randint(1,10)}.{random.randint(0,9)}.{random.randint(0,9)}",  
        "InitiatingProcessVersionInfoInternalFileName": fake.file_name(),  
        "InitiatingProcessVersionInfoOriginalFileName": fake.file_name(),  
        "InitiatingProcessVersionInfoFileDescription": fake.sentence(),  
        "InitiatingProcessId": random.randint(1000, 9999),  
        "InitiatingProcessCommandLine": f"{process_name} {fake.file_path(depth=2)}",  
        "InitiatingProcessCreationTime": fake.date_time_between(start_date=timestamp - timedelta(days=1), end_date=timestamp),  
        "InitiatingProcessFolderPath": fake.file_path(depth=3),  
        "InitiatingProcessParentFileName": fake.file_name(),  
        "InitiatingProcessParentId": random.randint(1000, 9999),  
        "InitiatingProcessParentCreationTime": fake.date_time_between(start_date=timestamp - timedelta(days=2), end_date=timestamp - timedelta(days=1)),  
        "InitiatingProcessAccountDomain": identity_row["AccountDomain"],  
        "InitiatingProcessAccountName": identity_row["AccountName"],  
        "InitiatingProcessAccountSid": identity_row["OnPremSid"],  
        "InitiatingProcessAccountUpn": identity_row["AccountUpn"],  
        "InitiatingProcessAccountObjectId": identity_row["AccountObjectId"],  
        "InitiatingProcessIntegrityLevel": random.choice(["Low", "Medium", "High"]),  
        "InitiatingProcessTokenElevation": random.choice(["TokenElevationTypeLimited", "TokenElevationTypeDefault", "TokenElevationTypeFull"]),  
        "ReportId": random.randint(100000, 999999),  
        "AppGuardContainerId": fake.uuid4(),  
        "AdditionalFields": "{}",  
        "InitiatingProcessSessionId": random.randint(1, 10),  
        "IsInitiatingProcessRemoteSession": random.choice([True, False]),  
        "InitiatingProcessRemoteSessionDeviceName": fake.hostname(),  
        "InitiatingProcessRemoteSessionIP": fake.ipv4(),  
    }  
    return event 

def generate_outbound_network_events(identity_row, device_row, timestamp, fake, remote_ip, remote_url, remote_port):
    process_name = random.choice(PROCESS_NAMES)
    event = {  
        "Timestamp": timestamp,  
        "DeviceId": device_row["DeviceId"],  
        "DeviceName": device_row["DeviceName"],  
        "ActionType": "OutboundConnection",  
        "RemoteIP": remote_ip,   
        "RemotePort": remote_port, 
        "RemoteUrl": remote_url,   
        "LocalIP": device_row["PublicIP"],  
        "LocalPort": random.randint(49152, 65535),
        "Protocol": random.choice(["TCP", "UDP"]),  
        "LocalIPType": "Public",  
        "RemoteIPType": "Public",  
        "InitiatingProcessSHA1": hashlib.sha1(process_name.encode()).hexdigest(),  
        "InitiatingProcessSHA256": hashlib.sha256(process_name.encode()).hexdigest(),  
        "InitiatingProcessMD5": hashlib.md5(process_name.encode()).hexdigest(),  
        "InitiatingProcessFileName": process_name,  
        "InitiatingProcessFileSize": random.randint(100, 10_000_000),  
        "InitiatingProcessVersionInfoCompanyName": fake.company(),  
        "InitiatingProcessVersionInfoProductName": fake.word(),  
        "InitiatingProcessVersionInfoProductVersion": f"{random.randint(1,10)}.{random.randint(0,9)}.{random.randint(0,9)}",  
        "InitiatingProcessVersionInfoInternalFileName": fake.file_name(),  
        "InitiatingProcessVersionInfoOriginalFileName": fake.file_name(),  
        "InitiatingProcessVersionInfoFileDescription": fake.sentence(),  
        "InitiatingProcessId": random.randint(1000, 9999),  
        "InitiatingProcessCommandLine": f"{process_name} {fake.file_path(depth=2)}",  
        "InitiatingProcessCreationTime": fake.date_time_between(start_date=timestamp - timedelta(days=1), end_date=timestamp),  
        "InitiatingProcessFolderPath": fake.file_path(depth=3),  
        "InitiatingProcessParentFileName": fake.file_name(),  
        "InitiatingProcessParentId": random.randint(1000, 9999),  
        "InitiatingProcessParentCreationTime": fake.date_time_between(start_date=timestamp - timedelta(days=2), end_date=timestamp - timedelta(days=1)),  
        "InitiatingProcessAccountDomain": identity_row["AccountDomain"],  
        "InitiatingProcessAccountName": identity_row["AccountName"],  
        "InitiatingProcessAccountSid": identity_row["OnPremSid"],  
        "InitiatingProcessAccountUpn": identity_row["AccountUpn"],  
        "InitiatingProcessAccountObjectId": identity_row["AccountObjectId"],  
        "InitiatingProcessIntegrityLevel": random.choice(["Low", "Medium", "High"]),  
        "InitiatingProcessTokenElevation": random.choice(["TokenElevationTypeLimited", "TokenElevationTypeDefault", "TokenElevationTypeFull"]),  
        "ReportId": random.randint(100000, 999999),  
        "AppGuardContainerId": fake.uuid4(),  
        "AdditionalFields": "{}",  
        "InitiatingProcessSessionId": random.randint(1, 10),  
        "IsInitiatingProcessRemoteSession": random.choice([True, False]),  
        "InitiatingProcessRemoteSessionDeviceName": fake.hostname(),  
        "InitiatingProcessRemoteSessionIP": fake.ipv4(),  
    }  
    return event

def generate_device_network_events(identity_row, device_row, timestamp, fake, process_name=None, destination_ip=None, destination_port=None, protocol=None, url=None, user_agent=None, http_headers=None):
    event = {
        "Timestamp": timestamp,
        "DeviceId": device_row["DeviceId"],
        "DeviceName": device_row["DeviceName"],
        "ActionType": "NetworkConnection",
        "RemoteIP": destination_ip if destination_ip else fake.ipv4(),
        "RemotePort": destination_port if destination_port else random.randint(1024, 65535),
        "RemoteUrl": url if url else fake.url(),
        "LocalIP": device_row.get("PublicIP", fake.ipv4()),
        "LocalPort": random.randint(49152, 65535),
        "Protocol": protocol if protocol else random.choice(["TCP", "UDP"]),
        "LocalIPType": "Public",
        "RemoteIPType": "Public",
        "InitiatingProcessSHA1": hashlib.sha1(fake.file_name().encode()).hexdigest(),
        "InitiatingProcessSHA256": hashlib.sha256(fake.file_name().encode()).hexdigest(),
        "InitiatingProcessMD5": hashlib.md5(fake.file_name().encode()).hexdigest(),
        "InitiatingProcessFileName": process_name if process_name else random.choice(PROCESS_NAMES),
        "InitiatingProcessFileSize": random.randint(100, 10_000_000),
        "InitiatingProcessVersionInfoCompanyName": fake.company(),
        "InitiatingProcessVersionInfoProductName": fake.word(),
        "InitiatingProcessVersionInfoProductVersion": f"{random.randint(1, 10)}.{random.randint(0, 9)}.{random.randint(0, 9)}",
        "InitiatingProcessVersionInfoInternalFileName": fake.file_name(),
        "InitiatingProcessVersionInfoOriginalFileName": fake.file_name(),
        "InitiatingProcessVersionInfoFileDescription": fake.sentence(),
        "InitiatingProcessId": random.randint(1000, 9999),
        "InitiatingProcessCommandLine": f"{random.choice(PROCESS_NAMES)} {fake.file_path(depth=2)}",
        "InitiatingProcessCreationTime": fake.date_time_between(start_date=timestamp - timedelta(days=1), end_date=timestamp),
        "InitiatingProcessFolderPath": fake.file_path(depth=3),
        "InitiatingProcessParentId": random.randint(1000, 9999),
        "InitiatingProcessParentFileName": fake.file_name(),
        "InitiatingProcessParentCreationTime": fake.date_time_between(start_date=timestamp - timedelta(days=1), end_date=timestamp),
        "InitiatingProcessAccountDomain": identity_row["AccountDomain"],
        "InitiatingProcessAccountName": identity_row["AccountName"],
        "InitiatingProcessAccountSid": identity_row["OnPremSid"],
        "InitiatingProcessAccountUpn": identity_row["AccountUpn"],
        "InitiatingProcessAccountObjectId": identity_row["AccountObjectId"],
        "InitiatingProcessIntegrityLevel": random.choice(["Medium", "High"]),
        "InitiatingProcessTokenElevation": random.choice(["TokenElevationTypeLimited", "TokenElevationTypeDefault", "TokenElevationTypeFull"]),
        "ReportId": fake.uuid4(),
        "AppGuardContainerId": "",
        "AdditionalFields": json.dumps({
            "UserAgent": user_agent if user_agent else fake.user_agent(),
            "HttpHeaders": http_headers if http_headers else {}
        }),
        "InitiatingProcessSessionId": random.randint(1000, 9999),
        "IsInitiatingProcessRemoteSession": random.choice([True, False]),
        "InitiatingProcessRemoteSessionDeviceName": fake.hostname() if random.choice([True, False]) else "",
        "InitiatingProcessRemoteSessionIP": fake.ipv4() if random.choice([True, False]) else ""
    }
    return event