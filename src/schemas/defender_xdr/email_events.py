from sqlalchemy import Column, Integer, BigInteger, String, DateTime, Text
from .base import Base  

class EmailEvents(Base):  
    __tablename__ = 'EmailEvents'  

    id = Column(  
        Integer,  
        primary_key=True,  
        autoincrement=True  
    )

    Timestamp = Column(  
        DateTime,  
        nullable=False,  
        comment="Date and time when the event was recorded"  
    )

    NetworkMessageId = Column(  
        String(255),  
        comment="Unique identifier for the email, generated by Microsoft 365"  
    )

    InternetMessageId = Column(  
        String(255),  
        comment="Public-facing identifier for the email that is set by the sending email system"  
    )

    SenderMailFromAddress = Column(  
        String(255),  
        comment="Sender email address in the MAIL FROM header, also known as the envelope sender or the Return-Path address"  
    )

    SenderFromAddress = Column(  
        String(255),  
        comment="Sender email address in the FROM header, which is visible to email recipients on their email clients"  
    )

    SenderDisplayName = Column(  
        String(255),  
        comment="Name of the sender displayed in the address book, typically a combination of a given or first name, a middle initial, and a last name or surname"  
    )

    SenderObjectId = Column(  
        String(255),  
        comment="Unique identifier for the sender's account in Microsoft Entra ID"  
    )

    SenderMailFromDomain = Column(  
        String(255),  
        comment="Sender domain in the MAIL FROM header, also known as the envelope sender or the Return-Path address"  
    )

    SenderFromDomain = Column(  
        String(255),  
        comment="Sender domain in the FROM header, which is visible to email recipients on their email clients"  
    )

    SenderIPv4 = Column(  
        String(15),  
        comment="IPv4 address of the last detected mail server that relayed the message"  
    )  

    SenderIPv6 = Column(  
        String(39),  
        comment="IPv6 address of the last detected mail server that relayed the message"  
    )

    RecipientEmailAddress = Column(  
        String(255),  
        comment="Email address of the recipient, or email address of the recipient after distribution list expansion"  
    )

    RecipientObjectId = Column(  
        String(255),  
        comment="Unique identifier for the email recipient in Microsoft Entra ID"  
    )  

    Subject = Column(  
        String(512),  
        comment="Subject of the email"  
    )

    EmailClusterId = Column(  
        BigInteger,  
        comment="Identifier for the group of similar emails clustered based on heuristic analysis of their contents"  
    )

    EmailDirection = Column(  
        String(50),  
        comment="Direction of the email relative to your network: Inbound, Outbound, Intra-org"  
    )

    DeliveryAction = Column(  
        String(50),  
        comment="Delivery action of the email: Delivered, Junked, Blocked, or Replaced"  
    )

    DeliveryLocation = Column(  
        String(50),  
        comment="Location where the email was delivered: Inbox/Folder, On-premises/External, Junk, Quarantine, Failed, Dropped, Deleted items"  
    )

    ThreatTypes = Column(  
        String(255),  
        comment="Verdict from the email filtering stack on whether the email contains malware, phishing, or other threats"  
    )

    ThreatNames = Column(  
        String(255),  
        comment="Detection name for malware or other threats found"  
    )

    DetectionMethods = Column(  
        String(255),  
        comment="Methods used to detect malware, phishing, or other threats found in the email"  
    )

    ConfidenceLevel = Column(  
        String(255),  
        comment="List of confidence levels of any spam or phishing verdicts. For spam, this column shows the spam confidence level (SCL), indicating if the email was skipped (-1), found to be not spam (0,1), found to be spam with moderate confidence (5,6), or found to be spam with high confidence (9). For phishing, this column displays whether the confidence level is 'High' or 'Low'."  
    )

    BulkComplaintLevel = Column(  
        Integer,  
        comment="Threshold assigned to email from bulk mailers, a high bulk complaint level (BCL) means the email is more likely to generate complaints, and thus more likely to be spam"  
    )

    EmailAction = Column(  
        String(100),  
        comment="Final action taken on the email based on filter verdict, policies, and user actions: Move message to junk mail folder, Add X-header, Modify subject, Redirect message, Delete message, send to quarantine, No action taken, Bcc message"  
    )

    EmailActionPolicy = Column(  
        String(255),  
        comment="Action policy that took effect: Antispam high-confidence, Antispam, Antispam bulk mail, Antispam phishing, Anti-phishing domain impersonation, Anti-phishing user impersonation, Anti-phishing spoof, Anti-phishing graph impersonation, Antimalware, Safe Attachments, Enterprise Transport Rules (ETR)"  
    )

    EmailActionPolicyGuid = Column(  
        String(255),  
        comment="Unique identifier for the policy that determined the final mail action"  
    )

    AuthenticationDetails = Column(  
        String(255),  
        comment="List of pass or fail verdicts by email authentication protocols like DMARC, DKIM, SPF or a combination of multiple authentication types (CompAuth)"  
    )

    AttachmentCount = Column(  
        Integer,  
        comment="Number of attachments in the email"  
    )

    UrlCount = Column(  
        Integer,  
        comment="Number of embedded URLs in the email"  
    )

    EmailLanguage = Column(  
        String(50),  
        comment="Detected language of the email content"  
    )

    Connectors = Column(  
        String(255),  
        comment="Custom instructions that define organizational mail flow and how the email was routed"  
    )

    OrgLevelAction = Column(  
        String(100),  
        comment="Action taken on the email in response to matches to a policy defined at the organizational level"  
    )

    OrgLevelPolicy = Column(  
        String(255),  
        comment="Organizational policy that triggered the action taken on the email"  
    )

    UserLevelAction = Column(  
        String(100),  
        comment="Action taken on the email in response to matches to a mailbox policy defined by the recipient"  
    )

    UserLevelPolicy = Column(  
        String(255),  
        comment="End-user mailbox policy that triggered the action taken on the email"  
    )

    ReportId = Column(  
        String(255),  
        comment="Event identifier based on a repeating counter. To identify unique events, this column must be used in conjunction with the DeviceName and Timestamp columns."  
    )

    AdditionalFields = Column(  
        Text,  
        comment="Additional information about the entity or event"  
    )

    LatestDeliveryLocation = Column(  
        String(50),  
        comment="Last known location of the email"  
    )

    LatestDeliveryAction = Column(  
        String(100),  
        comment="Last known action attempted on an email by the service or by an admin through manual remediation"  
    )
